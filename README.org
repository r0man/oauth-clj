* oauth-clj

  [[https://clojars.org/oauth-clj][https://img.shields.io/clojars/v/oauth-clj.svg]]
  [[https://travis-ci.org/r0man/oauth-clj][https://travis-ci.org/r0man/oauth-clj.svg]]
  [[http://jarkeeper.com/r0man/oauth-clj][http://jarkeeper.com/r0man/oauth-clj/status.svg]]
  [[http://jarkeeper.com/r0man/oauth-clj][https://jarkeeper.com/r0man/oauth-clj/downloads.svg]]

  A [[https://github.com/dakrone/clj-http][clj-http]] compatible OAuth library for Clojure.

  [[http://1.bp.blogspot.com/_ZEQTZAmHudI/TGFfdi9vsQI/AAAAAAAABu0/y9IO0RfafN4/s400/OAuth-at-the-DMV.png]]

** Usage

*** Twitter example

   #+BEGIN_SRC clojure
     (use 'oauth.twitter)
   #+END_SRC

   Define your consumer key and secret.

   #+BEGIN_SRC clojure
     (def consumer-key "qcz2O57srPsb5eZA2Jyw")
     (def consumer-secret "lfs5WjmIzPc3OlDNoHSfbxVBmPNmduTDq4rQHhNN7Q")
   #+END_SRC

   Obtain a OAuth request token from Twitter to request user authorization.

   #+BEGIN_SRC clojure
     (def request-token (oauth-request-token consumer-key consumer-secret))
     ;;=> {:oauth-callback-confirmed "true",
     ;;=>  :oauth-token-secret "1TPRuaqWZ9Y9viEdKbU4SQ2QsF5auLcMZaHOwYLK2ao",
     ;;=>  :oauth-token "C6FCXGYUIutgTZZP1EAAx2nT0cv8QO15K4EbjbzOmBs"}
   #+END_SRC

   Send the user to Twitter's authorization endpoint.

   #+BEGIN_SRC clojure
     (oauth-authorize (:oauth-token request-token))
   #+END_SRC

   Parse the parameters in your oauth callback endpoint.

   #+BEGIN_SRC clojure
     (def authorization
       {:oauth-verifier "ZCpKl8mgIUJmTkO8rfBeFotrKKd84igvytvLqlzo"
        :oauth-token "a5wQRcMsl5BMSPTmxZG5ER8OzMH6jdG4kX4uPtbC4Rw"})
   #+END_SRC

   Obtain the OAuth access token from Twitter.

   #+BEGIN_SRC clojure
     (def access-token
       (oauth-access-token
        consumer-key
        (:oauth-token authorization)
        (:oauth-verifier authorization)))
   #+END_SRC

   Make a clj-http OAuth client.

   #+BEGIN_SRC clojure
     (def client
       (oauth-client
        consumer-key
        consumer-secret
        (:oauth-token access-token)
        (:oauth-token-secret access-token)))
   #+END_SRC

   Post a Tweet ...

   #+BEGIN_SRC clojure
     (client
      {:method :post
       :url "http://api.twitter.com/1/statuses/update.json"
       :body (str "status=setting%20up%20my%20twitter%20私のさえずりを設定する")})
   #+END_SRC

*** Flickr example

This differs from the Twitter example both because Flickr's requirements are a bit different, and
because it comes from a client/server app. This code runs on my compojure-based server, but
authentication requires in-browser confirmation by the user.

  #+BEGIN_SRC clojure
    (use '[oauth.flickr :as flickr])
  #+END_SRC

  Define your consumer key, secret, and callback.

  #+BEGIN_SRC clojure
    (def flickr-api-key "0123456789abcdef0123456789abcdef")
    (def flickr-api-secret "fedcba9876543210")
    (def flickr-callback-path "/oauth/callback")
    (def flickr-api-server "https://api.flickr.com/services/rest/")
  #+END_SRC

  Toy mechanism for tracking Flickr auth requests, as they trampoline between this server, the
  user's browser, and the Flickr server. (Can this be replaced with something cleaner?)

  #+BEGIN_SRC clojure
    (defonce request-map (atom {}))
    (defn add-auth-request [{:keys [oauth-token oauth-token-secret oauth-verifier] :as request-token}]
      (swap! request-map assoc oauth-token {:request-secret oauth-token-secret :request-verifier oauth-verifier}))
    (defn clear-auth-request [request-token]
      (swap! request-map dissoc request-token))
    (defn get-auth-request [request-token]
      (get @request-map request-token))

    (defonce auth-map (atom {}))
    (defn clear-auth [oauth-token]
      (swap! auth-map dissoc oauth-token))
    (defn add-auth [& {:keys [auth-token auth-secret username user-nsid client] :as auth-set}]
      (swap! auth-map assoc auth-token auth-set))
    (defn get-auth [auth-token]
      (get @auth-map auth-token))
  #+END_SRC

  Obtain a OAuth request token from Flickr to request user authorization.

  #+BEGIN_SRC clojure
    (defn kickoff-flickr-auth [server-root]
      (let [callback-url (str server-root flickr-callback-path)
            flickr-token (flickr/oauth-request-token flickr-api-key flickr-api-secret callback-url)]
        (add-auth-request flickr-token)
        (ring.util.response/redirect (flickr/oauth-authorization-url (:oauth-token flickr-token)))))
  #+END_SRC

  Once the user oks the flickr request, flow continues with our callback.

  #+BEGIN_SRC clojure
    (defn flickr-oauth-callback-handler [& {request-token :oauth-token verifier :oauth-verifier}]
      (let [request-secret (-> request-token get-auth-request :request-secret)
            {:keys [username user-nsid oauth-token oauth-token-secret]} ;; Obtain the OAuth access token from Flickr
                                                                        (flickr/oauth-access-token
                                                                         flickr-api-key flickr-api-secret
                                                                         request-token request-secret
                                                                         verifier)
            client (flickr/oauth-client
                    flickr-api-key flickr-api-secret
                    oauth-token oauth-token-secret)]
        (clear-auth-request request-token)
        (add-auth :auth-token oauth-token
                  :auth-secret oauth-token-secret
                  :username username
                  :user-nsid user-nsid
                  :client client)
        (ring.util.response/redirect (str "/"
                                          "?username=" username
                                          "&user-nsid=" user-nsid
                                          "&auth-token=" oauth-token
                                          "&auth-secret=" oauth-token-secret))))
  #+END_SRC

  Add compojure routes to direct the requests.

  #+BEGIN_SRC clojure
    ;; Support fn, to ease using parallel dev and live servers
    (defn get-base-uri [request]
      "Generate a base uri from a ring request. For example 'http://localhost:5000/api'."
      (let [scheme (name (:scheme request))
            context (:context request)
            hostname (get (:headers request) "host")]
        (str scheme "://" hostname context)))


    (defroutes ...
      (GET "/kickoff" {:as request} (kickoff-flickr-auth (get-base-uri request)))
      (GET "/oauth/callback" [oauth_token oauth_verifier]
           (flickr-oauth-callback-handler :oauth-token oauth_token :oauth-verifier oauth_verifier)))
  #+END_SRC

** License

   Copyright (C) 2012-2016 r0man

   Distributed under the Eclipse Public License, the same as Clojure.

